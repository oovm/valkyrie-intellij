{
    parserClass = "com.github.valkyrie.language.parser.ValkyrieParser"
    parserUtilClass = "com.github.valkyrie.language.psi.ValkyrieParserExtension"

    extends = "com.github.valkyrie.language.ast.ValkyrieElement"

    psiClassPrefix = "Valkyrie"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.valkyrie.language.psi"
    psiImplPackage = "com.github.valkyrie.language.psi_node"

    elementTypeHolderClass = "com.github.valkyrie.language.psi.ValkyrieTypes"
    elementTypeClass = "com.github.valkyrie.language.psi.ValkyrieTokenType"
    tokenTypeClass = "com.github.valkyrie.language.psi.ValkyrieTokenType"

    psiImplUtilClass = "com.github.valkyrie.language.ast.ASTMethods"
    generateTokenAccessors = false

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL_XID = "Symbol"
        SYMBOL_RAW = "Symbol"
        BYTE = "Byte"
        STRING_START = "'"
        STRING_END = "'"
        STRING_CHAR = "String Character"
        STRING_EMPTY = "String Empty"
        COMMENT_LINE = "Comment Line"



        ACCENT = '^'
        BIND = '='
        EQ = '=='
        NE = '!='


        DOT2 = '..'
        DOT3 = '...'
        DOT_LESS = '..<'
        DOT_EQ = '..='
        COMMA = ','
        STAR = '*'
        AT = '@'
        DOLLAR = '$'
        HASH = '#'
        TO = "->"
        HYPHEN = "-"
        PLUS = "+"
        VERTICAL = "|"
        BANG = "!"
        AMP  = "&"
        TILDE = "~"
        QUESTION = "?"
        SLASH = "/"
        BACKSLASH = "\\"
        PERCENT = "%"
        PIPE = "|"

        OP_INC = "++"
        OP_ADD_ASSIGN = "+="
        OP_ADD = "+"
        OP_DEC = "--"
        OP_SUB_ASSIGN = "-="
        OP_SUB = "-"
        OP_MUL_ASSIGN = "*="
        OP_MUL = "*"
        OP_DIV_ASSIGN = "/="
        OP_DIV = "/"
        OP_MOD_ASSIGN = "%="
        OP_MOD = "%"

        OP_AND_ASSIGN = "&="
        OP_AND = "&"
        OP_OR_ASSIGN = "|="
        OP_OR = "|"
        // DOTS
        DOT = '.'
        SEMICOLON = ';'
        COLON = ':'
        PROPORTION = "::"
        //
        OP_EQ = "="
        OP_NE = "!="
        OP_BIND = ":="
        OP_NOT = "!"
        //
        OP_GT = ">"
        OP_GS = "/>"
        OP_GG = ">>"
        OP_GEQ = ">="
        OP_GGG = ">>>"
        //
        OP_LT = "<"
        OP_LS = "</"
        OP_LL = "<<"
        OP_LEQ = "<="
        OP_LLL = "<<<"

        OP_IS_A = "is"
        OP_NOT_A = "is not"

        OP_IN = "in"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        GENERIC_L = '::<'
        GENERIC_R = '>::'

        KW_NAMESPACE = "namespace"
        KW_IMPORT = "using"
        KW_EXTENSION = "extension"
        KW_CLASS = 'class'
        KW_AS = "as"

        IF = "if"
        ELSE = "else"
        FOR = "for"
        FORALL = "forall"
//      EXISTS = "exists"
        WHILE = "while"
        MATCH = 'match'
        CATCH = 'catch'
        LET = "let"
        NEW = 'new'
        DEFINE = "def"

        TRAIT = 'trait'
        TAGGED = 'tagged'
        BITFLAG = 'bitset'
        EXTENDS = 'extends'
    ]
}

valkyrie ::= ((normal_statements|top_statements) [SEMICOLON])*
private top_statements ::=
    namespace_statement
  | import_statement
  | extension_statement
  | class_statement
  | trait_statement
  | tagged_statement
  | bitflag_statement
  | extends_statement
  | new_statement
  | SEMICOLON
  ;
private normal_statements ::=
    if_statement
  | for_statement
  | while_statement
  | match_statement
  | let_statement
  | def_statement
  | type_statement
  | forall_statement
//  | macro_list
//  | macro_call
  | expression
  ;
// ---------------------------------------------------------------------------------------------------------------------
namespace_statement ::= KW_NAMESPACE namespace_dot {
    mixin="com.github.valkyrie.language.mixin.MixinNamespace"
};
namespace_dot       ::= identifier (maybe_dot identifier)*;
private maybe_dot   ::= DOT|PROPORTION;
// ---------------------------------------------------------------------------------------------------------------------
import_statement ::=
    KW_IMPORT import_block
  | KW_IMPORT namespace_dot maybe_dot import_block
  | KW_IMPORT namespace_dot
import_block     ::= <<brace_block import_item COMMA>>;
import_item      ::= (identifier maybe_dot)* import_block | import_rename;
import_rename    ::= identifier (maybe_dot identifier)* [KW_AS identifier];
// ---------------------------------------------------------------------------------------------------------------------
extension_statement ::= KW_EXTENSION identifier COLON namespace_dot <<brace_block normal_statements COMMA>> {
    mixin="com.github.valkyrie.language.mixin.MixinExtension"
};
// ---------------------------------------------------------------------------------------------------------------------
if_statement     ::= (IF condition block) [ef_statement* [else_statement]]
ef_statement     ::= else_if condition block;
private else_if  ::= ELSE IF
else_statement   ::= ELSE block;
block            ::= <<brace_block expression SEMICOLON>>;
condition        ::= case_pattern BIND expression | expression;
case_pattern     ::= CASE [identifier* [namespace]] pattern;
// ---------------------------------------------------------------------------------------------------------------------
for_statement    ::= FOR (case_pattern|normal_pattern) IN expression [if_guard] block [else_statement];
if_guard         ::= IF condition;
normal_pattern   ::= identifier* pattern | <<sequence pattern_item COMMA>> {
    mixin="com.github.valkyrie.language.mixin.MixinNormalPattern"
};
// ---------------------------------------------------------------------------------------------------------------------
private pattern  ::=
    <<parenthesis   pattern_pair COMMA>>
  | <<bracket_block pattern_pair COMMA>>
  | <<brace_block   pattern_pair COMMA>>
  ;
pattern_pair     ::= identifier* COLON pattern_value | identifier* (DOT3|DOT2) identifier | identifier+;
pattern_item     ::= identifier* (DOT3|DOT2) identifier | identifier+;
pattern_value    ::= identifier | pattern;
// ---------------------------------------------------------------------------------------------------------------------
while_statement  ::= WHILE condition block;
// ---------------------------------------------------------------------------------------------------------------------
match_statement  ::= MATCH identifier* match_block;
match_block      ::= <<brace_block match_expression SEMICOLON>>;
match_expression ::= case_pattern COLON (normal_statements [SEMICOLON])+
// ---------------------------------------------------------------------------------------------------------------------
let_statement    ::=
    LET normal_pattern [let_type_hint] [BIND expression]
  | LET case_pattern BIND expression;
let_type_hint    ::= COLON <<sequence type_expression COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
def_statement    ::= DEFINE modifier_symbols [[PROPORTION] type_angle] def_tuple [(COLON|TO) type_expression] [def_block| BIND expression] {
    mixin="com.github.valkyrie.language.mixin.MixinDefine"
    methods=[getSymbol getModifiers isMethod]
};
def_tuple        ::= <<parenthesis def_item COMMA>>;
def_item         ::= def_item_sign | modifier_symbols [(DOT2|DOT3) identifier] [COLON type_expression] [BIND expression] {
    mixin="com.github.valkyrie.language.mixin.MixinDefineItem"
    methods=[getSymbol getModifiers getSymbolColor]
}
def_item_sign    ::= ANGLE_L | ANGLE_R
def_block        ::= <<brace_block normal_statements SEMICOLON>>;
// ---------------------------------------------------------------------------------------------------------------------
type_statement   ::= TYPE identifier [[PROPORTION] type_angle] [BIND type_expr] {
    mixin="com.github.valkyrie.language.mixin.MixinType"
};
// ---------------------------------------------------------------------------------------------------------------------
forall_statement ::= FORALL <<sequence identifier COMMA>> [forall_block];
forall_block     ::= <<brace_block (type_expression COLON type_expression) (COMMA|SEMICOLON)>>;
// ---------------------------------------------------------------------------------------------------------------------
class_statement     ::= KW_CLASS modifier_symbols [[PROPORTION] type_angle] [COLON identifier] [class_tuple|class_brace] {
    mixin="com.github.valkyrie.language.mixin.MixinClass"
    methods=[getSymbol getModifiers getBraceItemList getTupleItemList isEmpty]
};
class_tuple         ::= <<parenthesis class_tuple_item COMMA>>;
class_brace         ::= <<brace_block class_brace_item (COMMA|SEMICOLON)>>;
class_tuple_item    ::= type_expression [BIND expression] {
    mixin="com.github.valkyrie.language.mixin.MixinClassTuple"
};
class_brace_item    ::= (class_numeric_key | modifier_symbols) COLON type_expression [BIND expression] {
    mixin="com.github.valkyrie.language.mixin.MixinClassBrace"
    methods=[getSymbol getModifiers]
};
class_numeric_key   ::= [modifier_symbols] INTEGER
// ---------------------------------------------------------------------------------------------------------------------
trait_statement     ::= TRAIT modifier_symbols [[PROPORTION] type_angle] [COLON type_expression] trait_block {
    extends="com.github.valkyrie.language.mixin.MixinTrait"
    methods=[getSymbol getModifiers]
};
trait_block         ::= <<brace_block normal_statements SEMICOLON>>;
//trait_item        ::= normal_statements;
// ---------------------------------------------------------------------------------------------------------------------
extends_statement   ::= EXTENDS modifier_symbols [[PROPORTION] type_angle] [COLON type_expression] trait_block {
    extends="com.github.valkyrie.language.mixin.MixinExtends"
    methods=[getSymbol getModifiers]
}
// ---------------------------------------------------------------------------------------------------------------------
tagged_statement    ::= TAGGED modifier_symbols [[PROPORTION] type_angle] tagged_block {
    mixin="com.github.valkyrie.language.mixin.MixinTagged"
    methods=[getSymbol getModifiers]
};
tagged_block        ::= <<brace_block tagged_item (COMMA|SEMICOLON)>>;
tagged_item         ::= identifier [class_tuple|class_brace];
// ---------------------------------------------------------------------------------------------------------------------
bitflag_statement   ::= BITFLAG modifier_symbols [bitflag_layout] bitflag_block {
    mixin="com.github.valkyrie.language.mixin.MixinBitflag"
    methods=[getSymbol getModifiers]
};
bitflag_block       ::= <<brace_block (bitflag_item | macro_call) SEMICOLON>>;
bitflag_layout      ::= PARENTHESIS_L type_expression PARENTHESIS_R;
bitflag_item        ::= identifier BIND expression;
// ---------------------------------------------------------------------------------------------------------------------
new_statement       ::= NEW modifier_symbols [[PROPORTION] type_angle] [COLON type_expression] trait_block;
// ---------------------------------------------------------------------------------------------------------------------
expression          ::= expr (op_binary expr)*;
private expr        ::= op_prefix* term (op_suffix|call_suffix|PROPORTION type_angle|slice_suffix)*;
private term        ::= list | tuple | atoms;
private op_binary   ::= type_binary | ANGLE_L | ANGLE_R | LESS | GREATER | DOT_LESS | DOT_EQ | DOT2 | DOT;
private op_prefix   ::= PLUS | MINUS | NOT | BANG | AMP | DOT3 | DOT2;
private op_suffix   ::= BANG | QUESTION;
call_suffix         ::= <<parenthesis expression COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
type_expression     ::= type_expr (type_binary type_expr)*;
private type_expr   ::= op_prefix* term (op_suffix|call_suffix|type_angle|slice_suffix)*;
private type_binary ::= VERTICAL | EQ | NE | PLUS | MINUS | TO;
type_angle          ::= <<generic_block ([identifier COLON] type_expression) COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
slice_suffix        ::= <<bracket_block slice_expression COMMA>>;
slice_expression    ::=
    [expression] COLON [expression] COLON [expression]
  | [expression] COLON [expression]
  | [expression] PROPORTION [expression]
  | expression;
// ---------------------------------------------------------------------------------------------------------------------
namespace        ::= (macro|identifier) (PROPORTION (macro|identifier))*
macro            ::= AT identifier;
modifier_symbols ::= identifier+;
// ---------------------------------------------------------------------------------------------------------------------
macro_call ::= macro [macro_item];
macro_item ::=
    <<parenthesis expression COMMA>>
  | <<brace_block pair COMMA>>
  | <<brace_block expression SEMICOLON>>;
macro_list ::= [AT|HASH] <<bracket_block (namespace macro_item) COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
pair           ::= atoms COLON expression;
list           ::= <<bracket_block expression COMMA>>
tuple          ::= <<parenthesis expression COMMA>>
private atoms  ::= number | string | boolean | namespace;
boolean        ::= "true" | "false";
number         ::= number_literal [identifier];
string         ::= [identifier] string_literal
identifier     ::= SYMBOL_XID | SYMBOL_RAW {
    mixin="com.github.valkyrie.language.mixin.MixinIdentifier"
}
number_literal ::= BYTE | INTEGER | DECIMAL;
string_literal ::= STRING_EMPTY | STRING_START STRING_CHAR+ STRING_END;
// ---------------------------------------------------------------------------------------------------------------------
private meta sequence      ::= <<item>> (<<sp>> <<item>>)* [<<sp>>];
// parenthesis ( )
private meta parenthesis   ::= PARENTHESIS_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] PARENTHESIS_R;
// bracket [ ]
private meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block   ::= BRACE_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACE_R;
// angle ::< >::
private meta generic_block ::= OP_PROPORTION? GENERIC_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] GENERIC_R OP_PROPORTION?;