/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.valkyrie.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;

import static com.github.valkyrie.language.psi.ValkyrieTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Valkyrie.flex</tt>
 */
public class _ValkyrieLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int ImportExport = 2;
    public static final int CommentBlock = 4;
    public static final int Let = 6;
    public static final int For = 8;
    public static final int Forall = 10;
    public static final int If = 12;
    public static final int Class = 14;
    public static final int Trait = 16;
    public static final int Define = 18;
    public static final int StringInside = 20;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 6, 6, 9, 9
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [12, 6, 3]
     * Total runtime size is 17136 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
    }

    /* The ZZ_CMAP_Z table has 2176 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
                    "\20\1\21\4\22\1\23\1\22\1\24\1\22\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32" +
                    "\1\33\25\25\1\34\20\22\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1" +
                    "\47\1\22\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\22\1\25\1\57\1\60\5\22\2\25" +
                    "\1\61\7\22\1\25\1\62\20\22\1\25\1\63\1\22\1\64\13\25\1\65\1\25\1\66\22\22" +
                    "\1\67\5\22\1\70\11\22\1\71\1\72\1\73\1\74\1\22\1\75\2\22\1\76\3\22\1\77\2" +
                    "\22\1\100\10\22\123\25\1\101\7\25\1\102\1\103\12\25\1\104\24\22\1\25\1\105" +
                    "\u0582\22\1\106\u017f\22");

    /* The ZZ_CMAP_Y table has 4544 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3" +
                    "\0\1\17\1\20\1\21\1\20\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\0\1\25\1" +
                    "\26\2\0\16\27\1\30\1\31\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\24" +
                    "\10\1\40\3\10\1\22\1\41\1\40\4\10\1\0\1\42\4\27\1\43\1\44\1\0\3\10\2\45\3" +
                    "\0\1\27\1\46\5\10\1\47\3\27\1\50\1\51\13\10\1\52\1\53\1\54\1\55\1\27\1\56" +
                    "\2\0\1\57\3\10\3\27\1\60\12\10\1\61\1\27\1\62\1\0\1\27\1\63\3\10\1\47\1\64" +
                    "\1\20\2\10\1\61\1\65\1\66\1\67\2\0\3\10\1\70\10\0\2\10\1\30\1\71\2\0\1\72" +
                    "\1\27\1\73\3\27\1\74\6\10\1\75\2\27\1\76\1\10\1\77\1\27\1\40\1\10\1\100\1" +
                    "\101\1\102\2\10\1\103\1\104\1\105\1\53\1\106\1\107\1\110\1\77\1\27\1\24\1" +
                    "\0\1\111\1\112\1\102\2\10\1\103\1\113\1\114\1\115\1\116\1\117\1\120\1\121" +
                    "\1\27\1\122\1\0\1\111\1\35\1\34\2\10\1\103\1\123\1\105\1\43\1\124\1\125\1" +
                    "\0\1\77\1\27\1\0\1\41\1\111\1\101\1\102\2\10\1\103\1\123\1\105\1\53\1\116" +
                    "\1\121\1\110\1\77\1\27\1\41\1\0\1\126\1\127\1\130\1\131\1\132\1\127\1\10\1" +
                    "\133\1\134\1\135\1\136\1\0\1\121\1\27\2\0\1\137\1\30\1\103\2\10\1\103\1\10" +
                    "\1\140\1\141\1\135\1\142\1\45\1\77\1\27\2\0\1\100\1\30\1\103\2\10\1\103\1" +
                    "\143\1\105\1\141\1\135\1\142\1\144\1\77\1\27\1\145\1\0\1\111\1\30\1\103\4" +
                    "\10\1\146\1\141\1\147\1\150\1\151\1\77\1\27\1\0\1\37\1\152\1\10\1\22\1\37" +
                    "\2\10\1\34\1\153\1\22\1\154\1\155\1\27\1\121\1\27\1\156\1\0\1\40\5\10\1\157" +
                    "\1\46\1\160\1\161\1\27\1\162\4\0\1\163\1\164\1\165\1\40\1\166\1\167\1\157" +
                    "\1\170\1\171\1\172\1\27\1\173\4\0\1\125\2\0\1\162\1\27\1\162\1\174\1\175\1" +
                    "\10\1\40\3\10\1\25\1\42\1\27\1\141\1\176\1\27\1\42\3\27\1\177\1\200\7\0\5" +
                    "\10\1\47\1\27\1\201\1\27\1\162\1\61\1\202\1\203\1\204\1\205\1\10\1\206\1\207" +
                    "\1\27\1\172\4\10\1\35\1\210\5\10\1\211\51\10\1\130\1\22\1\130\5\10\1\130\4" +
                    "\10\1\130\1\22\1\130\1\10\1\22\7\10\1\130\10\10\1\212\1\0\1\42\1\162\1\0\2" +
                    "\10\2\0\12\10\2\71\1\40\114\10\1\101\2\10\1\213\2\10\1\45\11\10\1\127\1\10" +
                    "\1\125\1\10\1\30\1\214\1\0\2\10\1\214\1\0\2\10\1\215\1\0\1\10\1\30\1\216\1" +
                    "\0\6\10\1\217\3\27\1\220\1\221\1\27\1\162\3\0\1\222\1\27\1\162\13\10\1\0\5" +
                    "\10\1\223\10\10\1\71\1\0\3\10\1\22\1\27\1\224\1\27\1\224\1\121\1\27\3\10\1" +
                    "\71\1\25\1\0\5\10\1\225\3\10\1\24\1\27\1\46\4\0\2\10\1\160\1\224\6\10\1\176" +
                    "\1\161\3\27\1\53\1\27\1\162\1\27\1\162\1\151\1\0\1\27\1\172\10\0\1\226\5\10" +
                    "\1\217\1\27\1\226\1\225\1\27\1\162\1\0\1\227\1\224\1\0\1\230\3\10\1\76\1\204" +
                    "\1\27\1\63\4\10\1\61\1\27\1\224\1\0\4\10\1\217\2\27\1\0\1\27\1\231\1\27\1" +
                    "\63\3\10\1\71\1\10\1\125\10\0\1\232\2\27\1\233\1\234\1\162\30\10\6\27\1\172" +
                    "\1\227\42\10\2\71\4\10\2\71\1\10\1\235\3\10\1\71\6\10\1\30\1\171\1\236\1\25" +
                    "\1\237\1\225\1\10\1\25\1\236\1\25\1\240\1\241\3\0\1\242\1\0\1\107\1\243\1" +
                    "\0\1\244\1\245\2\0\1\41\1\151\2\0\1\10\1\25\6\0\1\27\1\177\1\246\1\27\1\243" +
                    "\1\0\1\247\1\37\1\153\1\71\1\26\1\103\1\10\1\250\1\251\1\252\2\0\5\10\1\125" +
                    "\16\0\1\253\5\0\1\254\6\0\1\255\162\0\5\10\1\22\5\10\1\22\20\10\1\25\1\256" +
                    "\1\257\1\0\4\10\1\35\1\210\7\10\1\151\1\0\1\107\2\10\1\22\1\0\10\22\4\27\1" +
                    "\260\3\0\1\40\1\206\1\261\1\25\1\40\11\10\1\22\1\262\1\40\12\10\1\211\1\251" +
                    "\4\10\1\71\1\40\12\10\1\22\2\0\3\10\1\45\6\0\170\10\1\71\11\0\72\10\1\71\5" +
                    "\0\21\10\1\25\10\0\5\10\1\71\41\10\1\25\2\10\1\27\1\257\2\0\5\10\1\160\1\72" +
                    "\1\263\3\10\1\61\12\10\1\162\3\0\1\151\1\10\1\37\14\10\1\102\3\10\1\22\1\10" +
                    "\7\0\1\151\1\10\1\264\1\265\2\10\1\47\3\0\6\10\1\225\1\0\1\63\5\10\1\217\1" +
                    "\27\1\172\1\0\1\27\1\162\2\27\1\63\1\266\1\27\1\63\2\10\1\61\1\172\2\10\1" +
                    "\160\1\27\1\224\1\0\3\10\1\25\1\74\5\10\1\47\1\27\1\243\1\151\1\27\1\162\1" +
                    "\267\1\10\1\27\1\270\5\10\1\76\1\161\1\0\1\265\1\271\1\27\1\162\2\10\1\22" +
                    "\1\272\6\10\1\203\1\273\1\223\2\0\1\274\1\10\1\47\1\275\1\0\3\276\1\0\2\22" +
                    "\5\10\1\211\1\71\1\0\16\10\1\47\1\277\1\27\1\162\64\10\1\225\1\0\2\10\1\22" +
                    "\1\300\5\10\1\225\40\0\55\10\1\71\15\10\1\24\4\0\1\22\1\0\1\300\1\301\1\10" +
                    "\1\103\1\22\1\171\1\302\15\10\1\24\3\0\1\300\20\10\1\71\1\165\32\10\1\71\2" +
                    "\0\10\10\1\37\6\10\5\0\1\10\1\24\2\27\2\0\2\27\1\303\2\0\1\304\4\0\1\305\1" +
                    "\235\17\10\1\25\2\0\1\27\1\162\1\40\2\10\1\306\1\40\2\10\1\45\1\307\6\10\1" +
                    "\61\3\10\1\22\3\37\1\310\4\0\1\10\1\143\2\10\1\22\2\10\1\311\1\10\1\71\1\10" +
                    "\1\71\4\0\17\10\1\45\10\0\6\10\1\25\20\0\1\312\20\0\3\10\1\25\6\10\1\125\1" +
                    "\0\1\243\3\0\4\10\2\0\3\10\1\45\4\10\1\61\1\46\3\10\1\71\4\10\1\225\1\10\1" +
                    "\261\5\0\23\10\1\71\1\27\1\162\4\10\1\225\4\10\1\225\5\10\1\0\6\10\1\225\23" +
                    "\0\46\10\1\22\1\0\2\10\1\71\1\0\1\10\23\0\1\71\1\103\4\10\1\35\1\313\2\10" +
                    "\1\71\1\0\2\10\1\22\1\0\3\10\1\22\10\0\2\10\1\314\1\0\2\10\1\71\1\0\3\10\1" +
                    "\24\10\0\7\10\1\307\10\0\1\315\1\72\1\143\1\40\2\10\1\225\1\115\4\0\3\10\1" +
                    "\25\3\10\1\25\4\0\1\10\1\40\2\10\1\316\3\0\6\10\1\71\1\0\2\10\1\71\1\0\2\10" +
                    "\1\45\1\0\2\10\1\24\15\0\11\10\1\125\6\0\6\10\1\45\1\0\6\10\1\45\41\0\1\230" +
                    "\6\10\1\27\1\161\3\0\1\121\1\27\1\0\1\107\1\230\5\10\1\27\1\46\2\0\3\10\1" +
                    "\125\1\27\1\162\1\230\3\10\1\160\1\27\1\141\1\27\2\0\4\10\1\317\1\0\1\230" +
                    "\5\10\1\47\1\27\1\320\1\321\1\27\1\322\4\0\2\10\1\34\2\10\1\217\1\27\1\200" +
                    "\10\0\1\22\1\323\1\10\1\35\1\10\1\125\5\10\1\160\1\27\1\46\1\27\1\162\1\137" +
                    "\1\101\1\102\2\10\1\103\1\123\1\105\1\53\1\116\1\136\1\251\1\77\2\177\21\0" +
                    "\6\10\1\176\1\27\1\201\1\45\1\27\1\162\4\0\6\10\2\27\1\324\1\0\1\27\1\162" +
                    "\24\0\5\10\1\160\1\172\1\27\1\243\2\0\1\271\4\0\6\10\2\27\1\325\1\0\1\27\1" +
                    "\162\4\0\5\10\1\47\1\27\1\0\1\27\1\162\6\0\3\10\1\326\1\27\1\224\1\27\1\162" +
                    "\54\0\10\10\1\27\1\162\1\0\1\151\70\0\7\10\1\125\40\0\1\10\1\103\3\10\1\160" +
                    "\1\161\1\27\1\125\1\0\1\27\1\162\2\0\1\37\3\10\1\327\2\27\1\42\1\161\51\0" +
                    "\63\10\1\24\14\0\15\10\1\22\2\0\30\10\1\225\27\0\5\10\1\22\72\0\10\10\1\22" +
                    "\67\0\7\10\1\125\3\10\1\22\1\27\1\162\14\0\3\10\1\71\1\177\1\0\6\10\1\161" +
                    "\1\0\1\225\1\0\1\27\1\162\1\300\2\10\1\251\2\10\56\0\10\10\1\25\1\0\1\76\4" +
                    "\27\1\161\1\0\1\107\1\230\1\10\10\0\1\125\3\0\75\10\1\25\2\0\36\10\1\45\41" +
                    "\0\1\24\77\0\15\10\1\45\1\10\1\25\1\10\1\125\1\10\1\330\130\0\1\304\1\331" +
                    "\1\46\1\227\1\332\1\224\3\0\1\333\22\0\1\321\67\0\12\10\1\30\10\10\1\30\1" +
                    "\334\1\335\1\10\1\336\1\143\7\10\1\35\1\337\2\30\3\10\1\340\1\171\1\37\1\103" +
                    "\51\10\1\71\3\10\1\103\2\10\1\211\3\10\1\211\2\10\1\30\3\10\1\30\2\10\1\22" +
                    "\3\10\1\22\3\10\1\103\3\10\1\103\2\10\1\211\1\341\14\27\1\161\1\227\5\27\1" +
                    "\177\1\312\1\0\1\244\2\0\1\227\1\42\1\27\52\0\1\161\2\27\1\342\1\343\1\46" +
                    "\72\0\30\10\1\25\1\0\1\161\5\0\10\10\1\217\1\46\1\27\1\162\24\0\1\143\3\10" +
                    "\1\163\1\40\1\211\1\344\1\247\1\345\1\163\1\235\1\163\2\211\1\120\1\10\1\34" +
                    "\1\10\1\225\1\346\1\34\1\10\1\225\50\0\32\10\1\22\5\0\106\10\1\25\1\0\33\10" +
                    "\1\71\120\10\1\24\53\0\3\10\1\71\134\0\36\27\2\0");

    /* The ZZ_CMAP_A table has 1848 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\1\1\3\2\12\1\3\2\0\1\1\1\63\1\103\1\76\1\74\1\0\1\77\1\102\1\53\1" +
                    "\54\1\47\1\4\1\101\1\5\1\21\1\2\1\13\11\16\1\72\1\31\1\64\1\57\1\66\1\100" +
                    "\1\75\1\15\1\17\3\15\1\17\10\6\1\14\10\6\1\14\2\6\1\55\1\11\1\56\1\70\1\20" +
                    "\1\10\1\34\1\61\1\30\1\23\1\24\1\25\1\46\1\42\1\26\2\6\1\41\1\43\1\27\1\40" +
                    "\1\45\1\6\1\33\1\37\1\35\1\22\1\52\1\32\1\36\1\44\1\6\1\50\1\73\1\51\7\0\1" +
                    "\12\2\0\1\1\11\0\1\6\12\0\1\6\1\0\1\7\7\6\1\0\2\6\4\0\4\6\6\0\5\6\7\0\1\6" +
                    "\1\0\1\6\1\0\10\7\5\6\1\0\2\6\3\0\3\6\1\0\1\6\6\0\1\6\1\7\3\6\1\0\1\6\1\0" +
                    "\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\7\0\15\7\1\0\1\7\1\0" +
                    "\2\7\1\0\2\7\1\0\1\7\3\6\5\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7" +
                    "\2\0\6\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\2\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6" +
                    "\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6\6" +
                    "\6\0\6\7\1\0\11\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6" +
                    "\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\3\7\2\0\3\7\1\6\10\0" +
                    "\1\7\4\0\2\6\1\0\1\6\1\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1" +
                    "\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6" +
                    "\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6" +
                    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6" +
                    "\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\6\0\1\6\2\0\2\6" +
                    "\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\1\6\2\0\2\7\1\0\7\6\1\0\1" +
                    "\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\1\6\5\7\7\6\10\7\1\0\2\7\7" +
                    "\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0" +
                    "\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1" +
                    "\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3" +
                    "\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\5\0\1\6\2\0\3\6\1\0\7\6\2\0\3\7\1\1\11" +
                    "\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\4\0\1\6\1\7\5\0\3" +
                    "\7\2\0\1\6\1\7\1\6\5\0\4\7\4\0\4\6\4\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3" +
                    "\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0" +
                    "\6\6\2\0\2\6\13\1\5\0\2\12\5\0\1\1\1\7\13\0\1\7\12\0\1\1\1\0\1\7\3\0\3\7\2" +
                    "\0\1\6\4\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\1\0\1\60\2\0\1\62\13\0\1\71\2\0\1\65" +
                    "\1\67\7\0\4\6\3\7\2\6\4\0\1\1\4\0\3\6\1\0\5\6\3\0\2\7\2\0\3\6\6\7\1\0\3\6" +
                    "\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1\0\4\6\2" +
                    "\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7" +
                    "\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\1\0\1\6\1\0\1\6" +
                    "\3\0\4\6\4\0\1\7\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3" +
                    "\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6\1\7\2\0\1\6" +
                    "\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\1\6\4\7\2\6\1" +
                    "\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7\3\0\6\7\2\0" +
                    "\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4" +
                    "\6\1\0\4\6\2\0\3\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6" +
                    "\1\0\3\6\1\0\3\6\1\0\3\6");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\12\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1" +
                    "\2\6\1\7\7\5\1\10\5\5\1\11\1\12\1\5" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\5\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\1\1\5\1\47" +
                    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\12\5" +
                    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" +
                    "\2\67\1\46\1\70\5\0\1\6\1\71\10\5\1\72" +
                    "\16\5\1\73\1\5\1\74\1\0\1\5\1\75\17\5" +
                    "\1\46\1\76\1\77\1\100\1\101\1\102\1\103\1\5" +
                    "\1\104\5\5\1\104\1\105\2\5\1\106\10\5\1\107" +
                    "\1\5\1\107\1\5\1\110\1\111\1\5\1\112\4\5" +
                    "\1\112\14\5\1\113\2\5\1\114\1\104\2\5\1\21" +
                    "\6\5\1\115\5\5\1\116\1\5\1\117\2\5\1\112" +
                    "\1\5\1\120\4\5\1\121\4\5\1\122\5\5\1\123" +
                    "\1\5\1\124\1\125\1\126\2\5\1\127\10\5\1\130" +
                    "\1\131\6\5\1\20\4\5\1\132\1\57\5\5\1\133" +
                    "\3\5\1\132\2\5\1\133\5\5\1\134\4\5";

    private static int[] zzUnpackAction() {
        int[] result = new int[298];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc" +
                    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u02a8\0\u0374\0\u03b8" +
                    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8" +
                    "\0\u061c\0\u0660\0\u06a4\0\u02a8\0\u06e8\0\u072c\0\u0770\0\u07b4" +
                    "\0\u07f8\0\u02a8\0\u02a8\0\u083c\0\u02a8\0\u02a8\0\u02a8\0\u02a8" +
                    "\0\u0880\0\u02a8\0\u08c4\0\u02a8\0\u0908\0\u094c\0\u02a8\0\u0990" +
                    "\0\u02a8\0\u02a8\0\u02a8\0\u09d4\0\u02a8\0\u02a8\0\u02a8\0\u02a8" +
                    "\0\u02a8\0\u02a8\0\u02a8\0\u0a18\0\u0a5c\0\u02a8\0\u02a8\0\u02a8" +
                    "\0\u02a8\0\u0aa0\0\u0ae4\0\u0b28\0\u02a8\0\u02a8\0\u02a8\0\u02a8" +
                    "\0\u02a8\0\u02a8\0\u02a8\0\u0880\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38" +
                    "\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u02a8\0\u02a8" +
                    "\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u0e14\0\u0e58\0\u0e9c" +
                    "\0\u0ee0\0\u02a8\0\u03fc\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034" +
                    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254" +
                    "\0\u1298\0\u03b8\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430" +
                    "\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650" +
                    "\0\u02a8\0\u1694\0\u02a8\0\u16d8\0\u171c\0\u03b8\0\u1760\0\u17a4" +
                    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4" +
                    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1b5c\0\u1ba0" +
                    "\0\u0ff0\0\u02a8\0\u02a8\0\u02a8\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0" +
                    "\0\u1cf4\0\u1d38\0\u1d7c\0\u02a8\0\u1dc0\0\u1e04\0\u1e48\0\u03b8" +
                    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068" +
                    "\0\u03b8\0\u20ac\0\u20f0\0\u2134\0\u02a8\0\u02a8\0\u2178\0\u21bc" +
                    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u02a8\0\u2310\0\u2354\0\u2398" +
                    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8" +
                    "\0\u25fc\0\u03b8\0\u2640\0\u2684\0\u03b8\0\u03b8\0\u26c8\0\u270c" +
                    "\0\u03b8\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u03b8" +
                    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u03b8\0\u2a3c\0\u03b8" +
                    "\0\u2a80\0\u2ac4\0\u03b8\0\u2b08\0\u03b8\0\u2b4c\0\u2b90\0\u2bd4" +
                    "\0\u2c18\0\u03b8\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u03b8\0\u2d6c" +
                    "\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u03b8\0\u2ec0\0\u03b8\0\u03b8" +
                    "\0\u03b8\0\u2f04\0\u2f48\0\u03b8\0\u2f8c\0\u2fd0\0\u3014\0\u3058" +
                    "\0\u309c\0\u30e0\0\u3124\0\u3168\0\u03b8\0\u03b8\0\u31ac\0\u31f0" +
                    "\0\u3234\0\u3278\0\u32bc\0\u3300\0\u03b8\0\u3344\0\u3388\0\u33cc" +
                    "\0\u3410\0\u03b8\0\u03b8\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564" +
                    "\0\u03b8\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740" +
                    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u03b8\0\u38d8\0\u391c" +
                    "\0\u3960\0\u39a4";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[298];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\13\1\14\1\15\1\14\1\16\1\17\1\20\1\13" +
                    "\1\21\1\13\1\14\1\22\2\20\1\23\2\20\1\24" +
                    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\2\20\1\36\1\20\1\37\1\20\1\40\1\20" +
                    "\1\41\3\20\1\13\1\42\1\43\1\44\1\45\1\46" +
                    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
                    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" +
                    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\13" +
                    "\1\14\1\15\1\14\1\16\1\17\1\20\1\13\1\21" +
                    "\1\13\1\14\1\22\2\20\1\23\2\20\1\24\7\20" +
                    "\1\76\15\20\1\77\1\100\1\101\1\20\1\45\1\46" +
                    "\1\47\1\50\1\51\1\13\1\20\1\13\1\55\1\56" +
                    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" +
                    "\1\67\1\70\1\71\1\72\1\73\2\13\2\102\1\103" +
                    "\101\102\1\13\1\14\1\15\1\14\1\16\1\17\1\20" +
                    "\1\13\1\21\1\13\1\14\1\22\2\20\1\23\2\20" +
                    "\1\24\6\20\1\104\1\105\15\20\1\13\1\106\1\107" +
                    "\1\20\1\110\1\111\1\112\1\113\1\114\1\13\1\20" +
                    "\1\13\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" +
                    "\3\13\1\14\1\15\1\14\1\16\1\17\1\20\1\13" +
                    "\1\21\1\13\1\14\1\22\2\20\1\23\2\20\1\24" +
                    "\4\20\1\115\1\20\1\104\1\34\15\20\1\13\1\106" +
                    "\1\107\1\20\1\110\1\111\1\112\1\113\1\51\1\13" +
                    "\1\20\1\13\1\55\1\56\1\57\1\60\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\73\3\13\1\14\1\15\1\14\1\16\1\17\1\20" +
                    "\1\13\1\21\1\13\1\14\1\22\2\20\1\23\2\20" +
                    "\1\24\1\20\1\116\1\117\1\120\1\121\1\20\1\122" +
                    "\1\34\3\20\1\123\1\20\1\124\7\20\1\13\1\42" +
                    "\1\43\1\125\1\45\1\46\1\47\1\50\1\51\1\13" +
                    "\1\126\1\127\1\55\1\56\1\57\1\60\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\73\107\13\1\14\1\15\1\14\1\16\1\17\1\20" +
                    "\1\13\1\21\1\13\1\14\1\22\2\20\1\23\2\20" +
                    "\1\24\7\20\1\34\15\20\1\13\1\130\1\131\1\20" +
                    "\1\132\1\133\1\47\1\50\1\51\1\13\1\20\1\13" +
                    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
                    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\3\13" +
                    "\1\14\1\15\1\14\1\16\1\17\1\20\1\13\1\21" +
                    "\1\13\1\14\1\22\2\20\1\23\2\20\1\24\7\20" +
                    "\1\34\15\20\1\13\1\134\1\131\1\20\1\135\1\133" +
                    "\1\47\1\50\1\51\1\13\1\20\1\13\1\55\1\56" +
                    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" +
                    "\1\67\1\70\1\71\1\72\1\73\2\13\102\136\1\137" +
                    "\1\140\105\0\1\14\1\0\1\14\6\0\1\14\73\0" +
                    "\1\141\167\0\1\142\23\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\15\20\3\0\1\20\6\0\1\20\22\0" +
                    "\10\143\1\77\1\144\72\143\13\0\1\145\1\146\1\0" +
                    "\1\145\1\146\1\0\1\147\3\0\1\146\10\0\1\146" +
                    "\1\0\1\146\20\0\1\146\35\0\1\23\2\0\1\23" +
                    "\1\0\1\150\1\147\103\0\1\151\70\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\5\20\1\152\7\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\2\20\1\153\4\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\5\20\1\154" +
                    "\1\20\1\0\4\20\1\155\2\20\1\156\5\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\1\157\4\20\1\160\1\20\1\0\6\20\1\161\6\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\3\20\1\162\1\20\1\163\1\20\1\0\11\20" +
                    "\1\164\3\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\2\20\1\165\4\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\1\20\1\166\4\20\1\167\1\170" +
                    "\5\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\10\20\1\171\4\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\1\20\1\172\1\173\7\20\1\174\2\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\3\20\1\175\11\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\2\20" +
                    "\1\176\4\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\2\20" +
                    "\1\177\12\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\2\20\1\200\12\20" +
                    "\3\0\1\20\6\0\1\20\101\0\1\201\32\0\2\20" +
                    "\3\0\6\20\1\0\4\20\1\202\2\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\101\0\1\203\110\0\1\57" +
                    "\105\0\1\61\107\0\1\63\113\0\1\74\104\0\1\75" +
                    "\2\102\1\0\101\102\2\0\1\204\107\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\2\20\1\205\12\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\5\20\1\206\1\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\207" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\5\20\1\210\1\20\1\0" +
                    "\4\20\1\211\10\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\1\212\4\20\1\213\1\20" +
                    "\1\0\15\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\5\20\1\214\1\20\1\0\11\20" +
                    "\1\215\3\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\6\20\1\216\1\217" +
                    "\5\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\1\20\1\220\1\221\7\20" +
                    "\1\222\2\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\3\20\1\223\11\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\2\20\1\224\12\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\4\20" +
                    "\1\225\2\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\22\0\102\136\104\0\1\137\104\0\1\140\3\226\1\0" +
                    "\1\227\77\226\3\143\1\0\6\143\1\0\71\143\13\0" +
                    "\1\145\2\0\1\145\2\0\1\147\75\0\1\230\1\0" +
                    "\3\230\3\0\3\230\2\0\1\230\3\0\1\230\24\0" +
                    "\1\230\35\0\1\231\2\0\1\231\100\0\1\150\2\0" +
                    "\1\150\1\0\1\150\104\0\1\232\35\0\1\233\4\0" +
                    "\1\234\25\0\2\20\3\0\6\20\1\0\4\20\1\235" +
                    "\2\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\3\20\1\236\3\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\1\237\6\20\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\4\20" +
                    "\1\240\2\20\1\0\3\20\1\241\11\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\5\20\1\242\7\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\5\20\1\243\1\20" +
                    "\1\0\15\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\244\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\1\20\1\245\13\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\3\20" +
                    "\1\246\11\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\13\20\1\247\1\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\1\250\14\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\2\20\1\251\12\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\5\20\1\252\1\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\2\20\1\253\12\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\4\20\1\254\2\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\2\20\1\255\12\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\14\20\1\256" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\13\20\1\257\1\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\1\20\1\260\13\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\3\20" +
                    "\1\261\11\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\3\20\1\262\11\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\1\20\1\263\5\20\1\261\5\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\3\20\1\264\11\20\3\0\1\20" +
                    "\6\0\1\20\26\0\1\265\1\266\104\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\5\20\1\267\7\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\3\20\1\270\3\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\1\271\6\20" +
                    "\1\0\15\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\4\20\1\272\2\20\1\0\3\20" +
                    "\1\273\11\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\5\20\1\274\1\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\275\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\3\20" +
                    "\1\276\11\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\13\20\1\277\1\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\5\20\1\300\1\20\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\2\20\1\301\12\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\2\20" +
                    "\1\302\12\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\14\20\1\303\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\13\20\1\304\1\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\1\20\1\305\13\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\1\20\1\306" +
                    "\13\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\3\20\1\307\11\20\3\0" +
                    "\1\20\6\0\1\20\22\0\3\226\1\0\100\226\13\0" +
                    "\1\230\1\0\4\230\2\0\3\230\2\0\1\230\3\0" +
                    "\1\230\24\0\1\230\30\0\2\20\3\0\6\20\1\0" +
                    "\5\20\1\310\1\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\4\20\1\311" +
                    "\2\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\11\20\1\312" +
                    "\3\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\5\20\1\313\7\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\2\20\1\314\4\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\315" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\6\20\1\316\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\2\20\1\317\12\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\2\20" +
                    "\1\320\4\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\7\20" +
                    "\1\321\5\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\3\20\1\322\11\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\5\20\1\323\7\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\5\20\1\324\7\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\7\20" +
                    "\1\325\5\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\4\20\1\326\2\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\14\20\1\327\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\330" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\1\331\6\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\6\20\1\332\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\4\20\1\333" +
                    "\2\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\3\20\1\334\3\20\1\0" +
                    "\5\20\1\335\7\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\2\20\1\336\4\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\4\20\1\337\2\20\1\0\15\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\11\20\1\340\3\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\5\20\1\341\7\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\2\20\1\342\4\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\6\20\1\343\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\2\20" +
                    "\1\344\4\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\7\20" +
                    "\1\345\5\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\5\20\1\346\7\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\5\20\1\347\7\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\4\20" +
                    "\1\350\2\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\14\20" +
                    "\1\351\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\2\20\1\352\4\20\1\0\15\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\1\353\6\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\4\20\1\354\2\20" +
                    "\1\0\15\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\3\20\1\355\3\20\1\0\5\20" +
                    "\1\356\7\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\14\20\1\357\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\5\20\1\360\1\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\3\20\1\361\11\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\5\20\1\362\1\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\7\20\1\363\5\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\1\20\1\364\13\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\365" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\3\20\1\366" +
                    "\11\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\5\20\1\367\7\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\2\20\1\370\4\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\3\20\1\371\11\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\2\20\1\372\4\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\6\20\1\373\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\10\20\1\374\4\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\2\20" +
                    "\1\375\12\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\7\20\1\376\5\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\2\20\1\377\4\20\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\5\20" +
                    "\1\u0100\1\20\1\0\15\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\3\20" +
                    "\1\u0101\11\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\5\20\1\u0102\1\20\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\1\20\1\u0103\13\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\3\20\1\u0104\11\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\5\20" +
                    "\1\u0105\7\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\3\20\1\u0106\11\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\2\20\1\u0107\4\20\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\6\20" +
                    "\1\u0108\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\2\20\1\u0109" +
                    "\12\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\7\20\1\u010a\5\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\2\20\1\u010b\4\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\316" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\5\20\1\321" +
                    "\7\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\1\20\1\361\5\20\1\0\5\20\1\u010c" +
                    "\7\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\7\20\1\u010d\5\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\3\20\1\u010e\3\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\1\20\1\u010f\13\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\1\20\1\312\5\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\3\20\1\367\11\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\5\20\1\u0110\1\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\2\20\1\u0111\12\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\3\20\1\u0112" +
                    "\11\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\2\20\1\343\4\20\1\0\15\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\5\20\1\u0113\7\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\1\20\1\u0114" +
                    "\5\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\3\20\1\u0115\3\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\1\20\1\u0116\13\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\1\20\1\340\5\20\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\3\20\1\u0105\11\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\5\20\1\u0117\1\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\2\20\1\u0118\12\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\3\20\1\u0119\11\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\4\20\1\u011a" +
                    "\2\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\2\20\1\u011b" +
                    "\12\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\1\u011c\6\20\1\0\15\20\3\0\1\20" +
                    "\6\0\1\20\30\0\2\20\3\0\6\20\1\0\7\20" +
                    "\1\0\3\20\1\312\11\20\3\0\1\20\6\0\1\20" +
                    "\30\0\2\20\3\0\6\20\1\0\7\20\1\0\14\20" +
                    "\1\u011d\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\5\20\1\345\7\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\2\20\1\u011e\12\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\1\u011f\6\20" +
                    "\1\0\15\20\3\0\1\20\6\0\1\20\30\0\2\20" +
                    "\3\0\6\20\1\0\7\20\1\0\3\20\1\340\11\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\7\20\1\0\14\20\1\u0120\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\6\20\1\u0121\6\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\6\20\1\u0122\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\6\20\1\u0123\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\5\20\1\u0112\7\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\6\20\1\u0124\1\0\15\20" +
                    "\3\0\1\20\6\0\1\20\30\0\2\20\3\0\6\20" +
                    "\1\0\6\20\1\u0125\1\0\15\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\5\20\1\u0119\7\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\5\20\1\u0126\1\20\1\0" +
                    "\15\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\2\20\1\371\4\20\1\0\15\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\3\20\1\u0127\11\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\2\20\1\u0106" +
                    "\4\20\1\0\15\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\3\20\1\u0128" +
                    "\11\20\3\0\1\20\6\0\1\20\30\0\2\20\3\0" +
                    "\6\20\1\0\7\20\1\0\6\20\1\u0129\6\20\3\0" +
                    "\1\20\6\0\1\20\30\0\2\20\3\0\6\20\1\0" +
                    "\7\20\1\0\6\20\1\u012a\6\20\3\0\1\20\6\0" +
                    "\1\20\30\0\2\20\3\0\6\20\1\0\7\20\1\0" +
                    "\1\20\1\321\13\20\3\0\1\20\6\0\1\20\30\0" +
                    "\2\20\3\0\6\20\1\0\7\20\1\0\1\20\1\345" +
                    "\13\20\3\0\1\20\6\0\1\20\22\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[14824];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\12\0\1\11\2\1\1\11\15\1\1\11\5\1\2\11" +
                    "\1\1\4\11\1\1\1\11\1\1\1\11\2\1\1\11" +
                    "\1\1\3\11\1\1\7\11\2\1\4\11\3\1\7\11" +
                    "\13\1\7\11\4\1\1\11\5\0\31\1\1\11\1\1" +
                    "\1\11\1\0\25\1\3\11\7\1\1\11\20\1\2\11" +
                    "\6\1\1\11\155\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[298];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    private static int let_balance = 0;
    private static int comment_balance = 0;
    private static boolean case_appearence = false;
    private static String quote_balance = "";
    private static IntStack brace_stack = new IntStack(9);

    public _ValkyrieLexer() {
        this((java.io.Reader) null);
        init();
    }

    private static void init() {
        let_balance = 0;
        comment_balance = 0;
        case_appearence = false;
        quote_balance = "";
        brace_stack.clear();
    }

    public void state_begin(int state) {
        brace_stack.push(state);
        yybegin(state);
    }

    public void state_hold() {
        brace_stack.push(yystate());
    }

    public void state_end() {
        if (brace_stack.size() == 0) {
            yybegin(YYINITIAL);
        } else if (brace_stack.size() == 1) {
            brace_stack.pop();
            yybegin(YYINITIAL);
        } else {
            brace_stack.pop();
            yybegin(brace_stack.peek());
        }
    }

    public void match_indent() {
        // length may < indent_balance
        // t = yytext().length() - indent_balance - Length of Newline
        // yypushback(t);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;
            init();

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 93:
                    case 184:
                    case 183:
                    case 182:
                    case 181:
                    case 180:
                    case 179:
                    case 178:
                    case 177:
                    case 176:
                    case 175:
                    case 174:
                    case 173:
                    case 172:
                    case 171:
                    case 170:
                    case 169:
                    case 168:
                    case 167:
                    case 166:
                    case 165:
                    case 164:
                    case 163:
                    case 162:
                    case 161:
                    case 160:
                    case 159:
                    case 158:
                    case 157:
                    case 156:
                    case 155:
                    case 154:
                    case 153:
                    case 152:
                    case 151:
                    case 150:
                    case 149:
                    case 148:
                    case 147:
                    case 146:
                    case 145:
                    case 144:
                    case 143:
                    case 142:
                    case 141:
                    case 140:
                    case 139:
                    case 138:
                    case 137:
                    case 136:
                    case 135:
                    case 134:
                    case 133:
                    case 132:
                    case 131:
                    case 130:
                    case 129:
                    case 128:
                    case 127:
                    case 126:
                    case 125:
                    case 124:
                    case 123:
                    case 122:
                    case 121:
                    case 120:
                    case 119:
                    case 118:
                    case 117:
                    case 116:
                    case 115:
                    case 114:
                    case 113:
                    case 112:
                    case 111:
                    case 110:
                    case 109:
                    case 108:
                    case 107:
                    case 106:
                    case 105:
                    case 104:
                    case 103:
                    case 102:
                    case 101:
                    case 100:
                    case 99:
                    case 98:
                    case 97:
                    case 96:
                    case 95:
                    case 94:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    case 3: {
                        return PLUS;
                    }
                    case 4: {
                        return MINUS;
                    }
                    case 5: {
                        return SYMBOL_XID;
                    }
                    case 6: {
                        return INTEGER;
                    }
                    case 7: {
                        return DOT;
                    }
                    case 8: {
                        return SEMICOLON;
                    }
                    case 9: {
                        return BRACE_L;
                    }
                    case 10: {
                        return BRACE_R;
                    }
                    case 11: {
                        return PARENTHESIS_L;
                    }
                    case 12: {
                        return PARENTHESIS_R;
                    }
                    case 13: {
                        return BRACKET_L;
                    }
                    case 14: {
                        return BRACKET_R;
                    }
                    case 15: {
                        return BIND;
                    }
                    case 16: {
                        yybegin(Forall);
                        return FORALL;
                    }
                    case 17:
                    case 47: {
                        yybegin(Trait);
                        return EXTENDS;
                    }
                    case 18: {
                        return BANG;
                    }
                    case 19: {
                        return ANGLE_L;
                    }
                    case 20: {
                        return LESS;
                    }
                    case 21: {
                        return ANGLE_R;
                    }
                    case 22: {
                        return GREATER;
                    }
                    case 23: {
                        return ACCENT;
                    }
                    case 24: {
                        return PROPORTION;
                    }
                    case 25: {
                        return COLON;
                    }
                    case 26: {
                        return VERTICAL;
                    }
                    case 27: {
                        return DOLLAR;
                    }
                    case 28: {
                        return AT;
                    }
                    case 29: {
                        return HASH;
                    }
                    case 30: {
                        return AMP;
                    }
                    case 31: {
                        return QUESTION;
                    }
                    case 32: {
                        return COMMA;
                    }
                    case 33: {
                        if (yylength() == 2) {
                            return STRING_EMPTY;
                        }
                        quote_balance = yytext().toString();
                        yybegin(StringInside);
                        return STRING_START;
                    }
                    case 34: {
                        yybegin(YYINITIAL);
                        return SEMICOLON;
                    }
                    case 35: {
                        return SYMBOL_RAW;
                    }
                    case 36: {
                        state_begin(ImportExport);
                        return BRACE_L;
                    }
                    case 37:
                    case 49: {
                        state_end();
                        return BRACE_R;
                    }
                    case 38: {
                        return COMMENT_LINE;
                    }
                    case 39: {
                        state_begin(YYINITIAL);
                        return SEMICOLON;
                    }
                    case 40: {
                        let_balance += 1;
                        return BRACE_L;
                    }
                    case 41: {
                        let_balance -= 1;
                        return BRACE_R;
                    }
                    case 42: {
                        let_balance += 1;
                        return PARENTHESIS_L;
                    }
                    case 43: {
                        let_balance -= 1;
                        return PARENTHESIS_R;
                    }
                    case 44: {
                        let_balance += 1;
                        return BRACKET_L;
                    }
                    case 45: {
                        let_balance -= 1;
                        return BRACKET_R;
                    }
                    case 46: {
                        if (let_balance == 0) {
                            yybegin(YYINITIAL);
                            return BIND;
                        } else {
                            return BIND;
                        }
                    }
                    case 48: {
                        state_begin(Class);
                        return BRACE_L;
                    }
                    case 50: {
                        state_begin(Class);
                        return PARENTHESIS_L;
                    }
                    case 51: {
                        state_end();
                        return PARENTHESIS_R;
                    }
                    case 52: {
                        state_begin(YYINITIAL);
                        return BRACE_L;
                    }
                    case 53: {
                        state_begin(YYINITIAL);
                        return PARENTHESIS_L;
                    }
                    case 54: {
                        return STRING_CHAR;
                    }
                    case 55: {
                        if (quote_balance.equals(yytext().toString())) {
                            yybegin(YYINITIAL);
                            return STRING_END;
                        }
                        return STRING_CHAR;
                    }
                    case 56: {
                        return TO;
                    }
                    case 57: {
                        return DOT2;
                    }
                    case 58: {
                        return IF;
                    }
                    case 59: {
                        return EQ;
                    }
                    case 60: {
                        return NE;
                    }
                    case 61: {
                        if (let_balance == 0) {
                            yybegin(YYINITIAL);
                            return IN;
                        } else {
                            return SYMBOL_XID;
                        }
                    }
                    case 62: {
                        state_hold();
                        comment_balance++;
                        yybegin(CommentBlock);
                        return COMMENT_LINE;
                    }
                    case 63: {
                        return BYTE;
                    }
                    case 64: {
                        return DECIMAL;
                    }
                    case 65: {
                        return DOT3;
                    }
                    case 66: {
                        return DOT_EQ;
                    }
                    case 67: {
                        return DOT_LESS;
                    }
                    case 68: {
                        return DEFINE;
                    }
                    case 69: {
                        yybegin(For);
                        case_appearence = false;
                        return FOR;
                    }
                    case 70: {
                        return NEW;
                    }
                    case 71: {
                        yybegin(Let);
                        case_appearence = false;
                        return LET;
                    }
                    case 72: {
                        comment_balance++;
                        return COMMENT_LINE;
                    }
                    case 73: {
                        if (comment_balance == 1) {
                            state_end();
                            comment_balance--;
                        } else {
                            comment_balance--;
                        }
                        return COMMENT_LINE;
                    }
                    case 74: {
                        yybegin(Class);
                        return DEFINE;
                    }
                    case 75:
                    case 79: {
                        yybegin(Class);
                        return TAGGED;
                    }
                    case 76: {
                        return ELSE;
                    }
                    case 77: {
                        return TYPE;
                    }
                    case 78: {
                        if (!case_appearence) {
                            case_appearence = true;
                            return CASE;
                        } else {
                            return SYMBOL_XID;
                        }
                    }
                    case 80: {
                        yybegin(Class);
                        return EXTENDS;
                    }
                    case 81: {
                        yybegin(Class);
                        return TYPE;
                    }
                    case 82: {
                        yybegin(ImportExport);
                        return KW_IMPORT;
                    }
                    case 83:
                    case 92: {
                        return KW_EXTENSION;
                    }
                    case 84:
                    case 88: {
                        yybegin(Class);
                        return CLASS;
                    }
                    case 85: {
                        return WHILE;
                    }
                    case 86:
                    case 89: {
                        yybegin(Trait);
                        return TRAIT;
                    }
                    case 87: {
                        return MATCH;
                    }
                    case 90:
                    case 91: {
                        yybegin(Class);
                        return BITFLAG;
                    }
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
